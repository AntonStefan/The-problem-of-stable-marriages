#lang racket

(require "etapa2.rkt")

(provide (all-defined-out))

; TODO 1
; După modelul funcției stable-match?, implementați funcția


; get-unstable-couples care primește o listă de logodne
; engagements, o listă de preferințe masculine mpref și o 
; listă de preferințe feminine wpref, și întoarce lista
; tuturor cuplurilor instabile din engagements.
; Precizări (aspecte care se garantează, nu trebuie verificate):
; - fiecare cuplu din lista engagements are pe prima poziție
;   o femeie
; Nu este permisă recursivitatea pe stivă.
; Nu sunt permise alte funcții ajutătoare decât
; better-match-exists? și funcțiile de manipulare a listelor de
; preferințe definite în etapele anterioare.
; Nu este permisă apelarea multiplă a aceleiași funcții pe
; aceleași argumente.
; Folosiți una sau mai multe dintre expresiile let, let*, letrec,
; named let pentru a vă putea conforma acestor restricții.
(define (get-unstable-couples engagements mpref wpref)     ; cam toate imi afiseaza mai putin cu una?   ; trebuie sa fac in better match si inversul nu aici cazuri putin de asta nu se vede
(let loop ((eng engagements) (unstable-couples '()))
    (cond
      ((null? eng) unstable-couples)
      ((better-match-exists? (caar eng) (cdar eng) (get-pref-list wpref (caar eng)) mpref engagements)
       (loop (cdr eng) (cons (cons (caar eng) (cdar eng))
                                     unstable-couples)))
      ((better-match-exists? (cdar eng) (caar eng) (get-pref-list mpref (cdar eng)) wpref      ; sa fac un or intre cele doua better ca sa nu mia chem de doua ori loop
         (cons (cons (cdar eng) (caar eng))
               (remove (cons (caar eng) (cdar eng)) engagements)))
       (loop (cdr eng) (cons (cons (caar eng) (cdar eng))
                             unstable-couples)))
      (else (loop (cdr eng) unstable-couples)))))



; TODO 2
; Implementați funcția engage care primește o listă free-men
; de bărbați încă nelogodiți, o listă de logodne parțiale 
; engagements (unde fiecare cuplu are pe prima poziție o femeie),
; o listă de preferințe masculine mpref și o listă de preferințe 
; feminine wpref, și întoarce o listă completă de logodne stabile,
; obținută conform algoritmului Gale-Shapley:
; - cât timp există un bărbat m încă nelogodit
;   - w = prima femeie din preferințele lui m pe care m nu a cerut-o încă
;   - dacă w este nelogodită, adaugă perechea (w, m) la engagements
;   - dacă w este logodită cu m'
;     - dacă w îl preferă pe m lui m'
;       - m' devine liber
;       - actualizează partenerul lui w la m în engagements
;     - altfel, repetă procesul cu următoarea femeie din lista lui m
; Folosiți named let pentru orice proces recursiv ajutător (deci nu
; veți defini funcții ajutătoare recursive).
; Folosiți let și/sau let* pentru a evita calcule duplicate.
(define (engage free-men engagements mpref wpref)
    (let loop ((freem free-men)
               (engs engagements)
               (mwom (get-pref-list mpref (car free-men)))
               (is-changed #f))
    (if (null? freem)
        engs
        (let ((m (car freem)))
          (if (not (equal? (get-partner engs (car mwom)) m))
              (if (equal? (get-partner engs (car mwom)) #f)
                  (loop (cdr freem)
                        (cons (cons (car mwom) m) engs)
                        (get-pref-list mpref
                                       (if is-changed (car freem)
                                           (cadr freem)))
                        is-changed)                
                  (let ((current-partner (get-partner engs (car mwom))))
                    (if (preferable? (get-pref-list wpref (car mwom)) m current-partner)
                        (let ((freemup  (cons current-partner (cdr freem))))  
                          (loop freemup
                                (update-engagements engs (car mwom) m)
                                (get-pref-list mpref (car freemup))
                                #t))
                        (loop freem
                              engs
                              (cdr mwom)
                              is-changed))))
          (loop (cdr freem) engs (get-pref-list (cdr freem) mpref) is-changed))))))



        (define men-preferences-0
  '([adi  ana  bia cora]
    [bobo cora ana bia ]
    [cos  cora bia ana ]))
(define women-preferences-0
  '([ana  bobo adi cos ]
    [bia  adi  cos bobo]
    [cora bobo cos adi ]))

(engage '(adi bobo) '((cora . cos)) men-preferences-0 women-preferences-0)

; TODO 3
; Implementați funcția gale-shapley care este un wrapper pentru
; algoritmul implementat de funcția engage. Funcția gale-shapley
; primește doar o listă de preferințe masculine mpref și o listă
; de preferințe feminine wpref și calculează o listă completă de
; logodne stabile conform acestor preferințe.
(define (gale-shapley mpref wpref)
  (engage (list (car (map car mpref))) (cons (cons (caar wpref) (caar mpref)) '()) mpref wpref))



; TODO 4
; Implementați funcția get-couple-members care primește o listă
; de perechi cu punct și întoarce o listă simplă cu toate elementele 
; care apar în perechi.
; Folosiți funcționale, fără recursivitate explicită.
(define (get-couple-members pair-list)
    (foldr (lambda (pair members)
                (cons (car pair) (cons (cdr pair) members)))
              '()
              pair-list))

